--- ./lhash.h.orig	1969-12-31 19:00:00.000000000 -0500
+++ ./lhash.h	2009-02-09 14:48:06.000000000 -0500
@@ -63,6 +63,7 @@
 #ifndef HEADER_LHASH_H
 #define HEADER_LHASH_H
 
+#if 0 /* STANDALONE */
 #include <openssl/e_os2.h>
 #ifndef OPENSSL_NO_FP_API
 #include <stdio.h>
@@ -71,6 +72,9 @@
 #ifndef OPENSSL_NO_BIO
 #include <openssl/bio.h>
 #endif
+#endif /* STANDALONE */
+#define OPENSSL_NO_BIO /* STANDALONE */
+#define OPENSSL_NO_FP_API /* STANDALONE */
 
 #ifdef  __cplusplus
 extern "C" {


--- ./lhash.c.orig	2008-05-26 07:24:16.000000000 -0400
+++ ./lhash.c	2009-02-09 14:51:24.000000000 -0500
@@ -97,10 +97,20 @@
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>
+#if 0 /* STANDALONE */
 #include <openssl/crypto.h>
 #include <openssl/lhash.h>
+#else
+#include "lhash.h"
+#endif /* STANDALONE */
 
+#if 0 /* STANDALONE */
 const char lh_version[]="lhash" OPENSSL_VERSION_PTEXT;
+#else
+#define OPENSSL_malloc(i) malloc(i)
+#define OPENSSL_free(i) free(i)
+#define OPENSSL_realloc(i, j) realloc(i, j)
+#endif
 
 #undef MIN_NODES 
 #define MIN_NODES	16
@@ -214,6 +224,7 @@
 	return(ret);
 	}
 
+#if 0
 void *lh_delete(_LHASH *lh, const void *data)
 	{
 	unsigned long hash;
@@ -244,6 +255,7 @@
 
 	return(ret);
 	}
+#endif
 
 void *lh_retrieve(_LHASH *lh, const void *data)
 	{
@@ -302,10 +314,12 @@
 	doall_util_fn(lh, 0, func, (LHASH_DOALL_ARG_FN_TYPE)0, NULL);
 	}
 
+#if 0 /* STANDALONE */
 void lh_doall_arg(_LHASH *lh, LHASH_DOALL_ARG_FN_TYPE func, void *arg)
 	{
 	doall_util_fn(lh, 1, (LHASH_DOALL_FN_TYPE)0, func, arg);
 	}
+#endif /* STANDALONE */
 
 static void expand(_LHASH *lh)
 	{
@@ -363,6 +377,7 @@
 		}
 	}
 
+#if 0 /* STANDALONE */
 static void contract(_LHASH *lh)
 	{
 	LHASH_NODE **n,*n1,*np;
@@ -401,6 +416,7 @@
 		n1->next=np;
 		}
 	}
+#endif /* STANDALONE */
 
 static LHASH_NODE **getrn(_LHASH *lh, const void *data, unsigned long *rhash)
 	{
@@ -469,7 +485,9 @@
 	return((ret>>16)^ret);
 	}
 
+#if 0 /* STANDALONE */
 unsigned long lh_num_items(const _LHASH *lh)
 	{
 	return lh ? lh->num_items : 0;
 	}
+#endif /* STANDALONE */
